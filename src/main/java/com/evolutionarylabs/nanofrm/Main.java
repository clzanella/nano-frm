package com.evolutionarylabs.nanofrm;

import com.evolutionarylabs.nanofrm.dto.DateTimeAudit;
import com.evolutionarylabs.nanofrm.dto.Endereco;
import com.evolutionarylabs.nanofrm.dto.IPessoa;
import com.evolutionarylabs.nanofrm.dto.Pessoa;

/**
 * Created by cleberzanella on 02/05/17.
 */
public class Main {

    public static void main(String... args){

        dynamicProxySample();

        mapperSample();

        frmSample();

    }

    private static void dynamicProxySample(){

        System.out.println("-------- DynamicProxy Sample --------");

        IPessoa intfProxy = DynamicProxy.proxy(IPessoa.class, new DynamicProxy.ConsoleWriteHandler(), DynamicProxy.JDK_FACTORY);

        // print getter calls
        intfProxy.getId();
        intfProxy.getNome();


        Pessoa dtoProxy = DynamicProxy.proxy(Pessoa.class, new DynamicProxy.ConsoleWriteHandler(), DynamicProxy.BYTE_BUDDY_FACTORY);

        // print getter calls
        dtoProxy.getId();
        dtoProxy.getNome();

    }

    private static void mapperSample(){

        Mapper mapper = new Mapper(){

            @Override
            public void mappings() {

                add(new ClassMap<Pessoa>(Pessoa.class){

                    @Override
                    public void map() {

                        field(p -> p.getId())
                                .primaryKey().autoGenerated();

                        field(p -> p.getNome());
                        component(p -> p.getDateAudit());
                    }
                });

                add(new ClassMap<Endereco>(Endereco.class){

                    @Override
                    public void map() {

                        field(e -> e.getId())
                                .primaryKey().autoGenerated();

                        field(e -> e.isPrincipal());
                        field(e -> e.getLogradouro());
                        field(e -> e.getNumero());

                        field(e -> e.getPessoaId())
                                .reference(Pessoa.class).on(p -> p.getId());

                        component(t -> t.getDateAudit());
                    }
                });

                component(new ClassMap<DateTimeAudit>(DateTimeAudit.class){

                    @Override
                    public void map() {

                        field(t -> t.getCreatedOn());
                        field(t -> t.getUpdatedOn());
                        field(t -> t.getRemovedOn());

                    }
                });
            }
        };

        mapper.load();
        System.out.println("-------- Mapper Sample --------");
        System.out.println(mapper.generateDDL());

    }

    private static void frmSample(){

        System.out.println("-------- FRM Select Sample --------");

        final int id = 1;
        String log = "dfd";
        Frm.Queryable<Pessoa> q2 = Frm.query((b, f, t) -> b.from(Pessoa.class)
                .join(Endereco.class).on( (p, e) -> f.and(f.eq(e.getPessoaId(), p.getId()), e.isPrincipal()))
                .where( (p, e) -> f.eq(p.getId(), id))
                .where( (p, e) -> f.eq(f.lower(e.getLogradouro()), f.lower(log)))
        );
        System.out.println(q2.getAST());

        // query com join especial: Pessoa, Endereco principal
        // SELECT p.*, e.* FROM Pessoa p LEFT OUTER JOIN Endereco e ON(e.pessoaId = p.id AND e.principal)
        // WHERE e.principal ORDER BY p.nome ASC, logradouro DESC LIMIT 10,5
        Frm.Queryable<Pessoa> q3 = Frm.query( (b, f, t) -> b.from(Pessoa.class)
                .join(Endereco.class)
                .on( (p, e) -> f.and(f.eq(e.getPessoaId(), p.getId()), e.isPrincipal()))
                .where( (p, e) -> e.isPrincipal())
                .order((p, e) -> f.by(f.asc(p.getNome()), f.desc(e.getLogradouro())))
                .limit(10, 5)

        );
        System.out.println(q3.getAST());

//        // PHP
//        Queryable $q = FRM::query(function(QueryBuilder $b, Functions $f) {
//                return $b->from(Pessoa::CLASS_NAME)
//                ->join(Endereco::CLASS_NAME)
//                    ->on( function(Pessoa $p, Endereco $e) use($f) {
//                    return $f->and($f->eq($e->getPessoaId(), $p->getId(), $e->isPrincipal()));
//                })
//                ->where( function(Pessoa $p, Endereco $e) use($f) {
//                    return $e->isPrincipal();
//                })
//                ->order( function(Pessoa $p, Endereco $e) use($f) {
//                    $f->by($f->asc($p->getNome()), $f->desc($e->getLogradouro());
//                })
//                ->limit(10,5);
//            });
//
//        // PHP short closures
//        FRM::query((QueryBuilder $b, Functions $f) ~> {
//            return $b->from(Pessoa::CLASS_NAME)
//                ->join(Endereco::CLASS_NAME)
//                    ->on( (Pessoa $p, Endereco $e) use($f) ~> $f->and($f->eq($e->getPessoaId(), $p->getId(), $e->isPrincipal())) )               })
//                ->where( (Pessoa $p, Endereco $e) use($f) ~> $e->isPrincipal())
//                ->order( (Pessoa $p, Endereco $e) use($f) ~> $f->by($f->asc($p->getNome()), $f->desc($e->getLogradouro())) )
//                ->limit(10,5);
//        });
//
//        // PHP : using serializable functions
//        // http://www.htmlist.com/development/extending-php-5-3-closures-with-serialization-and-reflection/
//        Queryable $q = FRM::query(function(QueryBuilder $b, Functions $f) use($externalParam) {
//                return $b->from(Pessoa::CLASS_NAME)
//                ->join(Endereco::CLASS_NAME)
//                    ->on( function(Pessoa $p, Endereco $e) use($f) {
//                    return $e->getPessoaId() === $p->getId() && $e->isPrincipal();
//                })
//                ->where( function(Pessoa $p, Endereco $e) use($f) {
//                    return $e->isPrincipal() && strtolower($p->getNome()) === strtolower($externalParam);
//                })
//                ->order( function(Pessoa $p, Endereco $e) use($f) {
//                    $f->by($f->asc($p->getNome()), $f->desc($e->getLogradouro());
//                })
//                ->limit(10,5);
//            });
//
//
//        // C#
//        Queryable<Pessoa> q3 = FRM.Query( (b) => b.From<Pessoa>()
//                .Join<Endereco>()
//                  .On( (p, e) => e.PessoaId == p.Id && e.Principal )
//                .Where( (p, e) => e.Principal)
//                .Order((p, e) => f.By(f.Asc(p.Nome), f.Desc(e.Logradouro)))
//                .Limit(10, 5) );

    }

}
